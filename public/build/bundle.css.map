{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ExpandableItem.svelte",
    "MultiColumn.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { slide } from \"svelte/transition\";\n  import ButtonGenerator from \"./ButtonGenerator.svelte\";\n  import MultiColumn from \"./MultiColumn.svelte\";\n\n  let currentPage = 1;\n</script>\n\n<style>\n  :global(.preview a) {\n    text-decoration: none;\n  }\n\n  :global(.preview img) {\n    transition: 0.3s all;\n  }\n\n  :global(input[type=\"checkbox\"]) {\n    transform: scale(1.5);\n  }\n\n  p {\n    margin: 0;\n    padding: 0;\n  }\n\n  .grid {\n    /* display: grid;\n    grid-template-rows: auto 1fr;\n    grid-template-areas: \"sidebar\" \"content\"; */\n\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    width: 100%;\n    border-radius: 6px;\n  }\n\n  .content {\n    grid-area: content;\n    /* background-color: #fff;\n    padding: 1rem; */\n    /* overflow-y: scroll; */\n    /* margin-top: 3rem; */\n  }\n\n  .sidebar {\n    /* grid-area: sidebar; */\n    position: fixed;\n    top: 0;\n    display: flex;\n    align-items: center;\n    gap: 0.25rem;\n    padding: 0;\n    /* background-color: #eee; */\n    background-color: hsla(0, 0%, 93%, 0.8);\n    min-width: 200px;\n    width: 100%;\n    backdrop-filter: blur(30px) saturate(125%);\n    /* box-shadow: inset 0 0 12px rgba(0, 0, 0, 0.1); */\n    z-index: 1000;\n    -webkit-app-region: drag;\n  }\n\n  .sidebar button:not(.macCloseBtn):not(.winCloseBtn) {\n    padding: 0.5rem 0.5rem;\n    margin: 0;\n    border: none;\n    background-color: rgba(200, 200, 200, 0);\n    text-align: left;\n    color: #666 !important;\n    -webkit-app-region: no-drag;\n  }\n\n  .sidebar button:not(.macCloseBtn):not(.winCloseBtn):hover {\n    background-color: rgba(20, 20, 20, 0.1);\n    color: #000 !important;\n  }\n\n  .sidebar button:not(.macCloseBtn):not(.winCloseBtn).active {\n    pointer-events: none;\n    background-color: #fff;\n    color: #000 !important;\n\n    box-shadow: 0 0 12px rgba(0, 0, 0, 0.1);\n  }\n\n  .macCloseBtn {\n    margin: 0 0.05rem 0 0.75rem;\n    padding: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    line-height: 0;\n\n    background-color: #ff5c5c;\n    color: #ff5c5c;\n    font-size: 9pt;\n    width: 13px;\n    height: 13px;\n    border: 1px solid #e33e41;\n    border-radius: 50%;\n    display: inline-block;\n    font-weight: 600;\n\n    -webkit-app-region: no-drag;\n  }\n\n  .macCloseBtn:active {\n    background: #c14645;\n    border: 1px solid #b03537;\n    color: #790004;\n  }\n\n  .macCloseBtn:hover {\n    background-color: #ff5c5c !important;\n    color: #b03537 !important;\n  }\n\n  .winCloseBtn {\n    margin: 0 !important;\n    margin-left: auto !important;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.6rem;\n    font-weight: 200;\n    padding: 0 !important;\n    line-height: 0;\n    height: 48px;\n    width: 56px;\n    -webkit-app-region: no-drag;\n    color: #999;\n    border-radius: 1px !important;\n    border: 0;\n    background-color: transparent;\n  }\n\n  .winCloseBtn:hover {\n    background-color: #e92739 !important;\n    color: #fff !important;\n  }\n\n  .tabBtn {\n    margin: 0.4rem !important;\n    margin-right: 0 !important;\n  }\n</style>\n\n<div class=\"grid\">\n  <div class=\"sidebar\">\n    {#if process.platform === 'darwin'}\n      <button\n        style=\"margin-right: 0.25rem;\"\n        class=\"macCloseBtn\"\n        on:click={() => window.close()}>✗</button>\n    {/if}\n\n    <button\n      class=\"tabBtn\"\n      on:click={() => (currentPage = 1)}\n      class:active={currentPage == 1}>Multi-column images</button>\n    <button\n      class=\"tabBtn\"\n      on:click={() => (currentPage = 2)}\n      class:active={currentPage == 2}>Button generator</button>\n\n    {#if process.platform !== 'darwin'}\n      <button class=\"winCloseBtn\" on:click={() => window.close()}>×</button>\n    {/if}\n  </div>\n\n  <div class=\"content\">\n    {#if currentPage == 1}\n      <div transition:slide={{ duration: 250, x: 250, y: 0 }}>\n        <MultiColumn />\n      </div>\n    {:else if currentPage == 2}\n      <div transition:slide={{ duration: 250, x: 250, y: 0 }}>\n        <ButtonGenerator />\n      </div>\n    {/if}\n  </div>\n</div>\n",
    "<script>\n  export let title;\n\n  let isOpen = false;\n</script>\n\n<style>\n  details {\n    position: relative;\n\n    border-bottom: 1px solid #e2e8f0;\n  }\n\n  details:hover {\n    cursor: pointer;\n  }\n\n  .summary-title {\n    user-select: none;\n    font-size: 0.85rem;\n  }\n\n  .summary-content {\n    border-top: 1px solid hsl(214, 32%, 96%);\n    cursor: default;\n    padding: 1rem;\n    font-weight: 300;\n    line-height: 1.5;\n  }\n\n  summary {\n    padding: 0.5rem 1rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  summary:focus {\n    outline: none;\n  }\n\n  summary:hover .summary-chevron-up svg {\n    opacity: 1;\n  }\n\n  .summary-chevron-up svg {\n    opacity: 0.5;\n  }\n\n  .summary-chevron-up {\n    pointer-events: none;\n    transition: 0.3s transform;\n  }\n  .summary-chevron-up svg {\n    display: block;\n    transition: 0.3s opacity;\n  }\n\n  summary::-webkit-details-marker {\n    display: none;\n  }\n\n  .titleOpen {\n    font-weight: 500;\n  }\n\n  .open {\n    transform: scaleY(-1);\n  }\n</style>\n\n<details bind:open={isOpen}>\n  <summary>\n    <span class=\"summary-title\" class:titleOpen={isOpen}>{title}</span>\n    <div class=\"summary-chevron-up\" class:open={isOpen}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"1\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"feather feather-chevron-down\"><polyline\n          points=\"6 9 12 15 18 9\" /></svg>\n    </div>\n  </summary>\n\n  <div class=\"summary-content\">\n    <slot />\n  </div>\n</details>\n",
    "<script>\n  import { slide } from \"svelte/transition\";\n  import ExpandableItem from \"./ExpandableItem.svelte\";\n\n  var Mailchimp = require(\"mailchimp-api-v3\");\n\n  let columnImages = \"\";\n  let columnUrls = \"\";\n  let apiKeyDialog;\n  let imagesPerRow = 3;\n  let columnsHGap = 0;\n  let columnsVGap = 0;\n  let folderId = 0;\n  let newFolderName = \"\";\n\n  let columnBetweenBorderThickness = 0;\n  let columnBetweenBorderStyle = \"solid\";\n  let columnBetweenBorderColor = \"#aaaaaa\";\n  let columnBetweenBorderPaddingTop = 0;\n  let columnBetweenBorderPaddingBottom = 0;\n\n  let columnCopiedToClipboardTxt = \"Click to copy\";\n\n  let uploading = false;\n\n  let filesToUpload = [];\n  let folders = [];\n\n  let imageStyle =\n    \"display: block; width: {columnWidth}px; margin: {setGap}; padding: 0; line-height: 1;\";\n  let aStyle =\n    \"text-decoration: none; margin: 0; padding: 0; display: block; line-height: 1;\";\n\n  $: parsedImageStyle = imageStyle.replace(\"{columnWidth}\", colWidth);\n\n  let maxWidth = 600;\n  let apiKey = \"\";\n  let connState;\n  $: splitImages = columnImages.trimEnd().split(\"\\n\");\n  $: splitUrls = columnUrls.trimEnd().split(\"\\n\");\n\n  $: colWidth = Math.floor(\n    (maxWidth - (imagesPerRow - 1) * columnsHGap) / imagesPerRow\n  );\n\n  $: columnItems = splitImages.map((i) => {\n    let index = splitImages.indexOf(i);\n    return { image: i, url: splitUrls[index] };\n  });\n\n  $: columnItemsChunked = new Array(\n    Math.ceil(columnItems.length / imagesPerRow)\n  )\n    .fill()\n    .map((_, i) =>\n      columnItems.slice(i * imagesPerRow, i * imagesPerRow + imagesPerRow)\n    );\n\n  $: columnSeparatorTd =\n    columnsHGap > 0\n      ? `<td style=\"padding: 0; margin: 0; border: 0; padding: 0 ${columnsHGap}px 0 0;\"></td>`\n      : \"\";\n\n  $: getColChildItems = (source) =>\n    source\n      .map(\n        (\n          item\n        ) => `<td style=\"border: 0; padding: 0; margin: 0;\">\\n\\t<a href=\"${item.url}\" style=\"${aStyle}\">\\n\\t\\t<img src=\"${item.image}\" style=\"padding: 0; margin: 0; display: block; ${parsedImageStyle}\" />\n      </a></td>`\n      )\n      .join(`${columnSeparatorTd}\\n`);\n\n  $: columnOutputCode =\n    '<div class=\"mcnTextContent\" style=\"text-align: center; margin: 0; padding: 0; line-height: 0;\"><table style=\"border-collapse: collapse; margin: 0; padding: 0;\">' +\n    columnItemsChunked\n      .map(\n        (item) =>\n          `<tr style=\"border: 0; padding: 0; margin: 0;\">\\n${getColChildItems(\n            item\n          )}\\n</tr>`\n      )\n      .join(`${columnBetweenBorder}\\n`) +\n    \"</table></div>\";\n\n  $: columnBetweenBorder = `\\n<tr style=\"border: 0; padding: 0; margin: 0;\"><td colspan=\"${\n    columnsHGap > 0 ? imagesPerRow + (imagesPerRow - 1) : imagesPerRow\n  }\" style=\"padding: 0; padding-top: ${columnBetweenBorderPaddingTop}px; height: 0; ${\n    columnBetweenBorderThickness > 0\n      ? `border-bottom: ${columnBetweenBorderThickness}px ${columnBetweenBorderStyle} ${columnBetweenBorderColor};`\n      : \"border: 0;\"\n  }\"></td></tr><tr style=\"border: 0; padding: 0; margin: 0;\"><td colspan=\"${imagesPerRow}\" style=\"padding: 0; padding-top: ${columnBetweenBorderPaddingBottom}px; height: 0; border: 0;}\"></td></tr>`;\n\n  let columnOutputTextArea;\n\n  const columnSelectCode = (e) => {\n    columnOutputTextArea.select();\n    columnOutputTextArea.setSelectionRange(0, 99999);\n    document.execCommand(\"copy\");\n    columnCopiedToClipboardTxt = \"Copied to clipboard\";\n    setTimeout(() => (columnCopiedToClipboardTxt = \"Click to copy\"), 2000);\n  };\n\n  let previewDebug = false;\n\n  const toBase64 = () => {\n    filesToUpload = [...uploadElement.files];\n\n    if (filesToUpload.length > 10) {\n      alert(\"Select up to 10 files!\");\n      return;\n    }\n\n    uploading = true;\n\n    for (let piece of chunk(filesToUpload, 10)) {\n      for (let file of piece) {\n        let reader = new FileReader();\n        reader.onloadend = async () => {\n          const readerResult = reader.result;\n          currentBase64 = readerResult.substring(\n            reader.result.indexOf(\"base64,\") + 7\n          );\n          await doUpload(file.name, currentBase64);\n\n          filesToUpload.shift();\n\n          if (filesToUpload.length == 0) {\n            uploadElement.value = \"\";\n            uploading = false;\n          }\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  };\n\n  const getFolderList = async () => {\n    const mailChimp = new Mailchimp(apiKey);\n\n    let r = await mailChimp.get(\"/file-manager/folders\");\n\n    console.log(r);\n\n    let tempFolders = [{ id: 0, name: \"Main folder\" }];\n\n    for (let folder of r.folders) {\n      tempFolders.push({ id: folder.id, name: folder.name });\n    }\n\n    folders = [...tempFolders];\n  };\n\n  const addFolder = async () => {\n    const mailChimp = new Mailchimp(apiKey);\n\n    let r = await mailChimp.post(\"/file-manager/folders\", {\n      name: newFolderName,\n    });\n\n    alert(\"Folder added!\");\n    newFolderName = \"\";\n    getFolderList();\n  };\n\n  const doUpload = async (fileName, fileBase64) => {\n    const mailChimp = new Mailchimp(apiKey);\n\n    let r = await mailChimp.post(\"/file-manager/files\", {\n      folder_id: folderId,\n      name: fileName,\n      file_data: fileBase64,\n    });\n\n    const newImageUrl = r.full_size_url;\n\n    columnImages += newImageUrl;\n    columnImages += \"\\n\";\n    columnUrls += \"#\";\n    columnUrls += \"\\n\";\n\n    currentBase64 = null;\n    currentFileName = null;\n  };\n\n  let uploadElement;\n\n  let currentBase64;\n  let currentFileName;\n\n  const testConnection = async (e) => {\n    const response = await client.ping.get();\n    connState = \"✔ connected\";\n  };\n\n  const setUp = () => {\n    const mailchimp = new Mailchimp(apiKey);\n    mailchimp.get({ path: \"/ping\" }).then((r) => {\n      if (r.statusCode === 200) {\n        connState = \"✔ connected\";\n        apiKeyDialog.close();\n        getFolderList();\n      }\n    });\n  };\n\n  const chunk = (arr, chunkSize) => {\n    let R = [];\n    for (let i = 0, len = arr.length; i < len; i += chunkSize)\n      R.push(arr.slice(i, i + chunkSize));\n    return R;\n  };\n</script>\n\n<style>\n  p {\n    margin: 0;\n    padding: 0;\n  }\n\n  h3 {\n    margin-top: 1rem;\n  }\n\n  label {\n    margin: 0.25rem 0;\n  }\n\n  .connectedBtn {\n    text-align: left;\n    border: 1px solid var(--connection);\n  }\n\n  .connectedBtn:hover {\n    background-color: var(--connection);\n    color: #fff;\n  }\n\n  aside.uploading {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n</style>\n\n<div class=\"sidebar-grid\">\n  <main>\n    <h1>Multi-column images</h1>\n\n    <div class=\"flex\">\n      <label for=\"inputImages\">Images</label>\n      <label for=\"inputUrls\">URLs</label>\n      <textarea\n        disabled={uploading}\n        id=\"inputImages\"\n        bind:value={columnImages} />\n      <textarea disabled={uploading} id=\"inputUrls\" bind:value={columnUrls} />\n    </div>\n\n    <span>{colWidth}px</span>\n\n    {#if uploading}\n      <div transition:slide class=\"sk-fading-circle\">\n        <div class=\"sk-circle1 sk-circle\" />\n        <div class=\"sk-circle2 sk-circle\" />\n        <div class=\"sk-circle3 sk-circle\" />\n        <div class=\"sk-circle4 sk-circle\" />\n        <div class=\"sk-circle5 sk-circle\" />\n        <div class=\"sk-circle6 sk-circle\" />\n        <div class=\"sk-circle7 sk-circle\" />\n        <div class=\"sk-circle8 sk-circle\" />\n        <div class=\"sk-circle9 sk-circle\" />\n        <div class=\"sk-circle10 sk-circle\" />\n        <div class=\"sk-circle11 sk-circle\" />\n        <div class=\"sk-circle12 sk-circle\" />\n      </div>\n      <span>Uploading</span>\n      <br />\n    {/if}\n\n    {#if splitImages.length != splitUrls.length}\n      <small\n        style=\"margin-top: 0.5rem; display: inline-block;\"\n        transition:slide\n        class=\"warning\">\n        Number of records in both columns should be equal!\n      </small>\n    {/if}\n\n    {#if splitImages.length > 0 && columnImages.length > 0 && !uploading}\n      <h3 transition:slide style=\"margin: 1rem 0\">Preview</h3>\n      <div transition:slide class=\"preview\" style=\"width: {maxWidth}px\">\n        {@html columnOutputCode}\n      </div>\n    {/if}\n  </main>\n\n  <aside class:uploading>\n    <div class=\"item\">\n      {#if connState == null}\n        <button\n          style=\"text-align: left\"\n          on:click={() => apiKeyDialog.showModal()}>Connect to Mailchimp API <br />\n          <small style=\"opacity: 0.6\">For easy uploads</small>\n        </button>\n      {:else}\n        <button\n          class=\"connectedBtn\"\n          on:click={() => {\n            apiKey = '';\n            connState = null;\n          }}>Connected to MailChimp API<br />\n          <small style=\"opacity: 0.6\">Click to disconnect</small></button>\n\n        {#if connState != null}\n          <div transition:slide class=\"ctrl-flex\" style=\"align-items: center\">\n            <input\n              type=\"file\"\n              bind:this={uploadElement}\n              multiple\n              on:change={toBase64}\n              disabled={uploading} />\n          </div>\n        {/if}\n      {/if}\n    </div>\n\n    {#if connState != null}\n      <ExpandableItem title=\"Upload options\">\n        <div class=\"ctrl-flex\">\n          <label for=\"folderPicker\">Folder</label>\n          <select id=\"folderPicker\">\n            {#each folders as folder}\n              <option value={folder.id}>\n                {folder.name}\n                <small>(id {folder.id})</small>\n              </option>\n            {/each}\n          </select>\n        </div>\n\n        <div class=\"ctrl-flex\">\n          <label for=\"newFolderName\">Add a folder</label>\n          <input type=\"text\" id=\"newFolderName\" bind:value={newFolderName} />\n\n          <button\n            disabled={newFolderName.length < 1}\n            on:click={() => addFolder()}>Add folder</button>\n        </div>\n      </ExpandableItem>\n    {/if}\n\n    <ExpandableItem title=\"Container\">\n      <div class=\"ctrl-flex\">\n        <label for=\"maxWidth\">Maximum width</label>\n        <input\n          id=\"maxWidth\"\n          type=\"range\"\n          min=\"100\"\n          max=\"1200\"\n          bind:value={maxWidth} />\n        <code>{maxWidth} px</code>\n        <small>(<code>{colWidth} px</code> per image)</small>\n      </div>\n\n      <div class=\"ctrl-flex\">\n        <label for=\"colImgsPerRow\">Images per row</label>\n        <input\n          id=\"colImgsPerRow\"\n          type=\"range\"\n          min=\"1\"\n          max=\"6\"\n          bind:value={imagesPerRow} />\n        <code>{imagesPerRow}</code>\n      </div>\n\n      <div class=\"ctrl-flex\">\n        <label for=\"colBrdrSpcTop\">Space above row</label>\n        <input\n          id=\"colBrdrSpcTop\"\n          type=\"range\"\n          min=\"0\"\n          max=\"40\"\n          bind:value={columnBetweenBorderPaddingTop} />\n        <code>{columnBetweenBorderPaddingTop} px</code>\n      </div>\n      <div class=\"ctrl-flex\">\n        <label for=\"colBrdrSpcBtm\">Space below row</label>\n        <input\n          id=\"colBrdrSpcBtm\"\n          type=\"range\"\n          min=\"0\"\n          max=\"40\"\n          bind:value={columnBetweenBorderPaddingBottom} />\n        <code>{columnBetweenBorderPaddingBottom} px</code>\n      </div>\n\n      <div class=\"ctrl-flex\">\n        <label for=\"colHgap\">Horizontal gap</label>\n        <input\n          id=\"colHgap\"\n          type=\"range\"\n          min=\"0\"\n          max=\"32\"\n          bind:value={columnsHGap} />\n        <code>{columnsHGap} px</code>\n      </div>\n\n      <div class=\"ctrl-flex\">\n        <label for=\"colBrdrThcc\">Border</label>\n        <input\n          id=\"colBrdrThcc\"\n          type=\"range\"\n          min=\"0\"\n          max=\"10\"\n          bind:value={columnBetweenBorderThickness} />\n        <code>{columnBetweenBorderThickness} px</code>\n      </div>\n\n      {#if columnBetweenBorderThickness > 0}\n        <div transition:slide class=\"ctrl-flex\">\n          <input\n            type=\"color\"\n            bind:value={columnBetweenBorderColor}\n            id=\"bgColor\" />\n          <input\n            style=\"width: 5rem\"\n            type=\"text\"\n            bind:value={columnBetweenBorderColor}\n            maxlength=\"7\"\n            minlength=\"7\" />\n        </div>\n\n        <div transition:slide class=\"ctrl-flex\">\n          <div\n            style=\"height: 1px; width :32px; border-bottom: {columnBetweenBorderThickness}px {columnBetweenBorderStyle} grey\" />\n          <select id=\"containerAlign\" bind:value={columnBetweenBorderStyle}>\n            <option value=\"solid\">Solid</option>\n            <option value=\"dotted\">Dotted</option>\n            <option value=\"dashed\">Dashed</option>\n            <option value=\"double\">Double</option>\n            <option value=\"groove\">Groove</option>\n            <option value=\"ridge\">Ridge</option>\n          </select>\n        </div>\n      {/if}\n    </ExpandableItem>\n\n    <ExpandableItem title=\"Advanced\">\n      <div class=\"ctrl-flex\">\n        <label for=\"astyle\">Style for <code>a</code> tags</label>\n        <input\n          style=\"font-family: 'Inconsolata', monospace; width: 30rem;\"\n          type=\"text\"\n          bind:value={aStyle}\n          id=\"astyle\" />\n      </div>\n\n      <div class=\"ctrl-flex\">\n        <label for=\"imgstyle\">Style for <code>img</code> tags</label>\n        <input\n          style=\"font-family: 'Inconsolata', monospace; width: 30rem;\"\n          type=\"text\"\n          bind:value={imageStyle}\n          id=\"imgstyle\" />\n      </div>\n\n      <div class=\"ctrl-flex\">\n        <label for=\"__\">&nbsp;</label>\n        <small>\n          Use <code style=\"color: var(--accent)\">{'{columnWidth}'}</code> as a placeholder\n          for the actual image width.\n        </small>\n      </div>\n      <div class=\"ctrl-flex\">\n        <label for=\"___\">&nbsp;</label>\n        <small>\n          Use <code style=\"color: var(--accent)\">{'{setGap}'}</code> as a placeholder\n          for spacing set above.\n        </small>\n      </div>\n    </ExpandableItem>\n\n    <ExpandableItem title=\"Misc\">\n      <div style=\"display: flex; align-items: baseline;\">\n        <small style=\"margin-right: 0.5rem\">Clear</small>\n        <button\n          style=\"border-top-right-radius: 0; border-bottom-right-radius: 0\"\n          on:click={() => (columnImages = '')}>Images</button>\n        <button\n          style=\"border-radius: 0; border-left-width: 0; border-right-width: 0\"\n          on:click={() => (columnUrls = '')}>URLs</button>\n        <button\n          style=\"border-top-left-radius: 0; border-bottom-left-radius: 0\"\n          on:click={() => {\n            columnImages = '';\n            columnUrls = '';\n          }}>Both</button>\n      </div>\n      <span\n        style=\"opacity: 0.5; cursor: pointer;font-size: 0.8rem;display: inline-block;\"\n        on:click={() => {\n          columnImages += '\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo';\n          columnUrls += '\\n#\\n#';\n        }}>Add dummy data</span>\n\n      <span\n        style=\"opacity: 0.5; cursor: pointer;font-size: 0.8rem;display: inline-block; margin: 0 1rem;\"\n        on:click={() => {\n          columnImages += '\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo';\n          columnUrls += '\\n#\\n#\\n#\\n#';\n        }}>Add XL dummy data</span>\n    </ExpandableItem>\n\n    <div class=\"item\">\n      <span class=\"section-title\">Code</span>\n\n      <textarea\n        bind:this={columnOutputTextArea}\n        class=\"output\"\n        type=\"text\"\n        readonly\n        bind:value={columnOutputCode}\n        on:click={columnSelectCode} />\n\n      <p class=\"copiedToClipboardTxt\">{columnCopiedToClipboardTxt}</p>\n    </div>\n  </aside>\n</div>\n\n<dialog bind:this={apiKeyDialog}>\n  <h3>Connect</h3>\n\n  <label for=\"apiKeyTxt\">API key</label>\n  <input\n    style=\"width: 20rem; font-family: 'Inconsolata', 'SF Mono', Menlo, Consolas, 'Courier New', Courier, monospace;\"\n    type=\"text\"\n    class=\"apiKeyField\"\n    id=\"apiKeyTxt\"\n    bind:value={apiKey} />\n\n  <br />\n\n  <div\n    style=\"display: flex; gap: 4px; justify-content: flex-end; align-items: center; margin-top: 0.5rem;\">\n    <small\n      style=\"opacity: 0.6; cursor: pointer; margin-right: auto\"\n      on:click={() => (apiKey = 'be378ccde22c3aa784133ae1fe4ed5ec-us2')}>Demo\n      API key</small>\n\n    <button on:click={() => apiKeyDialog.close()}>Cancel</button>\n    <button disabled={apiKey.length < 1} on:click={setUp}>Connect</button>\n  </div>\n</dialog>\n"
  ],
  "names": [],
  "mappings": "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"
}