{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "MultiColumn.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { slide } from \"svelte/transition\";\n  import ButtonGenerator from \"./ButtonGenerator.svelte\";\n  import MultiColumn from \"./MultiColumn.svelte\";\n\n  let currentPage = 1;\n</script>\n\n<style>\n  :global(.preview a) {\n    text-decoration: none;\n  }\n\n  :global(.preview img) {\n    transition: 0.3s all;\n  }\n\n  :global(input[type=\"checkbox\"]) {\n    transform: scale(1.5);\n  }\n\n  p {\n    margin: 0;\n    padding: 0;\n  }\n\n  .grid {\n    /* display: grid;\n    grid-template-rows: auto 1fr;\n    grid-template-areas: \"sidebar\" \"content\"; */\n\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    width: 100%;\n    border-radius: 6px;\n  }\n\n  .content {\n    /* grid-area: content; */\n    background-color: #fff;\n    padding: 1rem;\n    /* overflow-y: scroll; */\n    margin-top: 3rem;\n  }\n\n  .sidebar {\n    /* grid-area: sidebar; */\n    position: fixed;\n    top: 0;\n    display: flex;\n    align-items: center;\n    gap: 0.25rem;\n    padding: 0.4rem;\n    /* background-color: #eee; */\n    background-color: hsla(0, 0%, 93%, 0.8);\n    min-width: 200px;\n    width: 100%;\n    backdrop-filter: blur(30px) saturate(125%);\n    /* box-shadow: inset 0 0 12px rgba(0, 0, 0, 0.1); */\n    z-index: 1000;\n    -webkit-app-region: drag;\n  }\n\n  .sidebar button:not(.macCloseBtn) {\n    padding: 0.5rem 0.5rem;\n    margin: 0;\n    border: none;\n    background-color: rgba(200, 200, 200, 0);\n    text-align: left;\n    color: #666 !important;\n    -webkit-app-region: no-drag;\n  }\n\n  .sidebar button:hover {\n    background-color: rgba(20, 20, 20, 0.1);\n    color: #000 !important;\n  }\n\n  .sidebar button.active {\n    pointer-events: none;\n    background-color: #fff;\n    color: #000 !important;\n\n    box-shadow: 0 0 12px rgba(0, 0, 0, 0.1);\n  }\n\n  .macCloseBtn {\n    font-size: 1rem;\n    font-weight: 300;\n    margin: 0;\n    padding: 0;\n    border-radius: 44px;\n    height: 15px;\n    width: 15px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    line-height: 0;\n    background-color: crimson;\n    color: rgba(255, 255, 255, 0.4);\n    border: none;\n    -webkit-app-region: no-drag;\n  }\n\n  .macCloseBtn:hover {\n    background-color: red;\n    color: #fff;\n  }\n</style>\n\n<div class=\"grid\">\n  <div class=\"sidebar\">\n    {#if process.platform === 'darwin'}\n      <button\n        style=\"margin-right: 0.25rem;\"\n        class=\"macCloseBtn\"\n        on:click={() => window.close()}>✗</button>\n    {/if}\n\n    <button\n      on:click={() => (currentPage = 1)}\n      class:active={currentPage == 1}>Multi-column images</button>\n    <button\n      on:click={() => (currentPage = 2)}\n      class:active={currentPage == 2}>Button generator</button>\n\n    {#if process.platform !== 'darwin'}\n      <button\n        style=\"margin-left: auto; font-size: 1.5rem; padding-top: 0; padding-bottom: 0;\"\n        on:click={() => window.close()}>✗</button>\n    {/if}\n  </div>\n\n  <div class=\"content\">\n    {#if currentPage == 1}\n      <div transition:slide>\n        <MultiColumn />\n      </div>\n    {:else if currentPage == 2}\n      <div transition:slide>\n        <ButtonGenerator />\n      </div>\n    {:else}\n      <h2>About</h2>\n      <br />\n      <p>Mailchimp content generator 1.0</p>\n      <p>(C) Goran Alković, 2020</p>\n    {/if}\n  </div>\n</div>\n",
    "<script>\n  import { slide } from \"svelte/transition\";\n\n  var Mailchimp = require(\"mailchimp-api-v3\");\n\n  let columnImages = \"\";\n  let advancedMode = false;\n  let columnUrls = \"\";\n  let apiKeyDialog;\n  let imagesPerRow = 2;\n  let columnsHGap = 0;\n  let columnsVGap = 0;\n  let folderId = 0;\n  let newFolderName = \"\";\n\n  let columnBetweenBorderThickness = 1;\n  let columnBetweenBorderStyle = \"solid\";\n  let columnBetweenBorderColor = \"#aaaaaa\";\n  let columnBetweenBorderPaddingTop = 18;\n  let columnBetweenBorderPaddingBottom = 20;\n\n  let columnCopiedToClipboardTxt = \"Click to copy\";\n\n  let uploading = false;\n\n  let filesToUpload = [];\n  let folders = [];\n\n  let imageStyle =\n    \"display: inline-block; width: {columnWidth}px; margin: {setGap}; padding: 0; line-height: 1;\";\n  let aStyle =\n    \"text-decoration: none; margin: 0; padding: 0; display: inline-block; line-height: 1;\";\n\n  $: parsedImageStyle = imageStyle\n    .replace(\"{columnWidth}\", colWidth)\n    .replace(\"{setGap}\", `${columnsVGap}px ${columnsHGap}px`);\n\n  let maxWidth = 600;\n  let apiKey = \"\";\n  let connState;\n  $: splitImages = columnImages.trimEnd().split(\"\\n\");\n  $: splitUrls = columnUrls.trimEnd().split(\"\\n\");\n\n  $: colWidth = Math.round(\n    maxWidth / imagesPerRow - columnsHGap * imagesPerRow - 6\n  );\n\n  $: columnItems = splitImages.map((i) => {\n    let index = splitImages.indexOf(i);\n    return { image: i, url: splitUrls[index] };\n  });\n\n  $: columnItemsChunked = new Array(\n    Math.ceil(columnItems.length / imagesPerRow)\n  )\n    .fill()\n    .map((_, i) =>\n      columnItems.slice(i * imagesPerRow, i * imagesPerRow + imagesPerRow)\n    );\n\n  $: getColChildItems = (source) =>\n    source\n      .map(\n        (\n          item\n        ) => `\\t<a href=\"${item.url}\" style=\"${aStyle}\">\\n\\t\\t<img src=\"${item.image}\" style=\"${parsedImageStyle}\" />\n      </a>`\n      )\n      .join(\"\\n\");\n\n  $: columnOutputCode = columnItemsChunked\n    .map(\n      (item) =>\n        `<div class=\"mcnTextContent\" style=\"text-align: center; margin: 0; padding: 0; line-height: 1;\">\\n${getColChildItems(\n          item\n        )}\\n</div>`\n    )\n    .join(`${columnBetweenBorder}\\n`);\n\n  $: columnBetweenBorder = `\\n<div style=\"height: 1px; display: block; margin-top: ${columnBetweenBorderPaddingTop}px; margin-bottom: ${columnBetweenBorderPaddingBottom}px; ${\n    columnBetweenBorderThickness > 0\n      ? `border-bottom: ${columnBetweenBorderThickness}px ${columnBetweenBorderStyle} ${columnBetweenBorderColor};`\n      : \"\"\n  }\"></div>`;\n\n  let columnOutputTextArea;\n\n  const columnSelectCode = (e) => {\n    columnOutputTextArea.select();\n    columnOutputTextArea.setSelectionRange(0, 99999);\n    document.execCommand(\"copy\");\n    columnCopiedToClipboardTxt = \"Copied to clipboard\";\n    setTimeout(() => (columnCopiedToClipboardTxt = \"Click to copy\"), 2000);\n  };\n\n  let previewDebug = false;\n\n  const toBase64 = () => {\n    filesToUpload = [...uploadElement.files];\n\n    if (filesToUpload.length > 10) {\n      alert(\"Select up to 10 files!\");\n      return;\n    }\n\n    uploading = true;\n\n    for (let piece of chunk(filesToUpload, 10)) {\n      for (let file of piece) {\n        let reader = new FileReader();\n        reader.onloadend = async () => {\n          const readerResult = reader.result;\n          currentBase64 = readerResult.substring(\n            reader.result.indexOf(\"base64,\") + 7\n          );\n          await doUpload(file.name, currentBase64);\n\n          filesToUpload.shift();\n\n          if (filesToUpload.length == 0) {\n            uploadElement.value = \"\";\n            uploading = false;\n          }\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  };\n\n  const getFolderList = async () => {\n    const mailChimp = new Mailchimp(apiKey);\n\n    let r = await mailChimp.get(\"/file-manager/folders\");\n\n    console.log(r);\n\n    let tempFolders = [{ id: 0, name: \"Main folder\" }];\n\n    for (let folder of r.folders) {\n      tempFolders.push({ id: folder.id, name: folder.name });\n    }\n\n    folders = [...tempFolders];\n  };\n\n  const addFolder = async () => {\n    const mailChimp = new Mailchimp(apiKey);\n\n    let r = await mailChimp.post(\"/file-manager/folders\", {\n      name: newFolderName,\n    });\n\n    alert(\"Folder added!\");\n    newFolderName = \"\";\n    getFolderList();\n  };\n\n  const doUpload = async (fileName, fileBase64) => {\n    const mailChimp = new Mailchimp(apiKey);\n\n    let r = await mailChimp.post(\"/file-manager/files\", {\n      folder_id: folderId,\n      name: fileName,\n      file_data: fileBase64,\n    });\n\n    const newImageUrl = r.full_size_url;\n\n    columnImages += newImageUrl;\n    columnImages += \"\\n\";\n    columnUrls += \"#\";\n    columnUrls += \"\\n\";\n\n    currentBase64 = null;\n    currentFileName = null;\n  };\n\n  let uploadElement;\n\n  let currentBase64;\n  let currentFileName;\n\n  const testConnection = async (e) => {\n    const response = await client.ping.get();\n    connState = \"✔ connected\";\n  };\n\n  const setUp = () => {\n    const mailchimp = new Mailchimp(apiKey);\n    mailchimp.get({ path: \"/ping\" }).then((r) => {\n      if (r.statusCode === 200) {\n        connState = \"✔ connected\";\n        apiKeyDialog.close();\n        getFolderList();\n      }\n    });\n  };\n\n  const chunk = (arr, chunkSize) => {\n    let R = [];\n    for (let i = 0, len = arr.length; i < len; i += chunkSize)\n      R.push(arr.slice(i, i + chunkSize));\n    return R;\n  };\n</script>\n\n<style>\n  p {\n    margin: 0;\n    padding: 0;\n  }\n\n  h3 {\n    margin-top: 1rem;\n  }\n\n  label {\n    margin: 0.25rem 0;\n  }\n\n  .connectedBtn {\n    text-align: left;\n    border: 1px solid var(--connection);\n  }\n\n  .connectedBtn:hover {\n    background-color: var(--connection);\n    color: #fff;\n  }\n</style>\n\n<h1>Multi-column images</h1>\n\n{#if connState == null}\n  <button\n    style=\"text-align: left\"\n    on:click={() => apiKeyDialog.showModal()}>Connect to Mailchimp API <br />\n    <small style=\"opacity: 0.6\">For easy uploads</small>\n  </button>\n{:else}\n  <button\n    class=\"connectedBtn\"\n    on:click={() => {\n      apiKey = '';\n      connState = null;\n    }}>Connected to MailChimp API<br />\n    <small style=\"opacity: 0.6\">Click to disconnect</small></button>\n{/if}\n\n{#if connState != null}\n  <div transition:slide>\n    <h3>Upload</h3>\n\n    <div class=\"ctrl-flex\">\n      <label for=\"upload\">Drag and drop or</label>\n      <input\n        type=\"file\"\n        id=\"upload\"\n        bind:this={uploadElement}\n        multiple\n        on:change={toBase64}\n        disabled={uploading} />\n      <small class=\"warning-inverse\">Max 10 files at once</small>\n    </div>\n\n    <div class=\"ctrl-flex\">\n      <label for=\"folderPicker\">Folder</label>\n      <select id=\"folderPicker\">\n        {#each folders as folder}\n          <option value={folder.id}>\n            {folder.name}\n            <small>(id {folder.id})</small>\n          </option>\n        {/each}\n      </select>\n    </div>\n\n    <div class=\"ctrl-flex\">\n      <label for=\"newFolderName\">Add a folder</label>\n      <input type=\"text\" id=\"newFolderName\" bind:value={newFolderName} />\n\n      <button\n        disabled={newFolderName.length < 1}\n        on:click={() => addFolder()}>Add folder</button>\n    </div>\n\n    {#if uploading}\n      <div transition:slide class=\"sk-fading-circle\">\n        <div class=\"sk-circle1 sk-circle\" />\n        <div class=\"sk-circle2 sk-circle\" />\n        <div class=\"sk-circle3 sk-circle\" />\n        <div class=\"sk-circle4 sk-circle\" />\n        <div class=\"sk-circle5 sk-circle\" />\n        <div class=\"sk-circle6 sk-circle\" />\n        <div class=\"sk-circle7 sk-circle\" />\n        <div class=\"sk-circle8 sk-circle\" />\n        <div class=\"sk-circle9 sk-circle\" />\n        <div class=\"sk-circle10 sk-circle\" />\n        <div class=\"sk-circle11 sk-circle\" />\n        <div class=\"sk-circle12 sk-circle\" />\n      </div>\n      <span>Uploading</span>\n      <br />\n    {/if}\n  </div>\n{/if}\n\n<div\n  style=\"display: flex; justify-content: space-between; align-items: baseline; margin: 1rem 0\">\n  <h3 style=\"margin: 0; padding: 0;\">Inputs</h3>\n\n  <div style=\"display: flex; align-items: baseline;\">\n    <span\n      style=\"opacity: 0.5; cursor: pointer;font-size: 0.8rem;display: inline-block;\"\n      on:click={() => {\n        columnImages = 'https://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo';\n        columnUrls = '#\\n#';\n      }}>Dummy data</span>\n\n    <span\n      style=\"opacity: 0.5; cursor: pointer;font-size: 0.8rem;display: inline-block; margin: 0 1rem;\"\n      on:click={() => {\n        columnImages = 'https://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo\\nhttps://yt3.ggpht.com/a/AATXAJzF-K41Fq96yE6jxs_fE6Hr7zvMXsQbqz1QNxGpjg=s88-c-k-c0xffffffff-no-rj-mo';\n        columnUrls = '#\\n#\\n#\\n#';\n      }}>Dummy data XL</span>\n    <small style=\"margin-right: 0.5rem\">Clear</small>\n    <button\n      style=\"border-top-right-radius: 0; border-bottom-right-radius: 0\"\n      on:click={() => (columnImages = '')}>Images</button>\n    <button\n      style=\"border-radius: 0; border-left-width: 0; border-right-width: 0\"\n      on:click={() => (columnUrls = '')}>URLs</button>\n    <button\n      style=\"border-top-left-radius: 0; border-bottom-left-radius: 0\"\n      on:click={() => {\n        columnImages = '';\n        columnUrls = '';\n      }}>Both</button>\n  </div>\n</div>\n\n<div class=\"flex\">\n  <label for=\"inputImages\">Images</label>\n  <label for=\"inputUrls\">URLs</label>\n  <textarea disabled={uploading} id=\"inputImages\" bind:value={columnImages} />\n  <textarea disabled={uploading} id=\"inputUrls\" bind:value={columnUrls} />\n</div>\n\n{#if splitImages.length != splitUrls.length}\n  <small\n    style=\"margin-top: 0.5rem; display: inline-block;\"\n    transition:slide\n    class=\"warning\">\n    Number of records in both columns should be equal!\n  </small>\n{/if}\n\n<h3>Container style</h3>\n\n<div class=\"ctrl-flex\">\n  <label for=\"maxWidth\">Maximum width</label>\n  <input\n    id=\"maxWidth\"\n    type=\"range\"\n    min=\"100\"\n    max=\"1200\"\n    bind:value={maxWidth} />\n  <code>{maxWidth} px</code>\n  <small>(<code>{colWidth} px</code> per image)</small>\n</div>\n\n<div class=\"ctrl-flex\">\n  <label for=\"colImgsPerRow\">Images per row</label>\n  <input\n    id=\"colImgsPerRow\"\n    type=\"range\"\n    min=\"1\"\n    max=\"6\"\n    bind:value={imagesPerRow} />\n  <code>{imagesPerRow}</code>\n</div>\n\n<h4>Border between rows</h4>\n\n<div class=\"ctrl-flex\">\n  <label for=\"colBrdrSpcTop\">Space above</label>\n  <input\n    id=\"colBrdrSpcTop\"\n    type=\"range\"\n    min=\"0\"\n    max=\"40\"\n    bind:value={columnBetweenBorderPaddingTop} />\n  <code>{columnBetweenBorderPaddingTop} px</code>\n</div>\n<div class=\"ctrl-flex\">\n  <label for=\"colBrdrSpcBtm\">Space below</label>\n  <input\n    id=\"colBrdrSpcBtm\"\n    type=\"range\"\n    min=\"0\"\n    max=\"40\"\n    bind:value={columnBetweenBorderPaddingBottom} />\n  <code>{columnBetweenBorderPaddingBottom} px</code>\n</div>\n\n<div class=\"ctrl-flex\">\n  <label for=\"colBrdrThcc\">Thickness</label>\n  <input\n    id=\"colBrdrThcc\"\n    type=\"range\"\n    min=\"0\"\n    max=\"10\"\n    bind:value={columnBetweenBorderThickness} />\n  <code>{columnBetweenBorderThickness} px</code>\n</div>\n\n{#if columnBetweenBorderThickness > 0}\n  <div transition:slide class=\"ctrl-flex\">\n    <label for=\"bgColor\">Color</label>\n    <input type=\"color\" bind:value={columnBetweenBorderColor} id=\"bgColor\" />\n    <input\n      style=\"width: 5rem\"\n      type=\"text\"\n      bind:value={columnBetweenBorderColor}\n      maxlength=\"7\"\n      minlength=\"7\" />\n  </div>\n\n  <div transition:slide class=\"ctrl-flex\">\n    <label for=\"containerAlign\">Style</label>\n    <div\n      style=\"height: 1px; width :32px; border-bottom: {columnBetweenBorderThickness}px {columnBetweenBorderStyle} grey\" />\n    <select id=\"containerAlign\" bind:value={columnBetweenBorderStyle}>\n      <option value=\"solid\">Solid</option>\n      <option value=\"dotted\">Dotted</option>\n      <option value=\"dashed\">Dashed</option>\n      <option value=\"double\">Double</option>\n      <option value=\"groove\">Groove</option>\n      <option value=\"ridge\">Ridge</option>\n    </select>\n  </div>\n{/if}\n\n<h3>Image style</h3>\n\n<div class=\"ctrl-flex\">\n  <label for=\"colHgap\">Horizontal spacing</label>\n  <input id=\"colHgap\" type=\"range\" min=\"0\" max=\"20\" bind:value={columnsHGap} />\n  <code>{columnsHGap} px</code>\n</div>\n\n<div class=\"ctrl-flex\">\n  <label for=\"colVgap\">Vertical spacing</label>\n  <input id=\"colVgap\" type=\"range\" min=\"0\" max=\"20\" bind:value={columnsVGap} />\n  <code>{columnsVGap} px</code>\n</div>\n\n<div class=\"ctrl-flex\">\n  <label for=\"_\">Advanced controls</label>\n  <button\n    on:click={() => (advancedMode = !advancedMode)}>{advancedMode ? 'Hide' : 'Show'}</button>\n</div>\n\n{#if advancedMode}\n  <div class=\"ctrl-flex\" transition:slide>\n    <label for=\"astyle\">Style for <code>a</code> tags</label>\n    <input\n      style=\"font-family: 'Inconsolata', monospace; width: 30rem;\"\n      type=\"text\"\n      bind:value={aStyle}\n      id=\"astyle\" />\n  </div>\n\n  <div class=\"ctrl-flex\" transition:slide>\n    <label for=\"imgstyle\">Style for <code>img</code> tags</label>\n    <input\n      style=\"font-family: 'Inconsolata', monospace; width: 30rem;\"\n      type=\"text\"\n      bind:value={imageStyle}\n      id=\"imgstyle\" />\n  </div>\n\n  <div class=\"ctrl-flex\" transition:slide>\n    <label for=\"__\">&nbsp;</label>\n    <small>\n      Use <code style=\"color: var(--accent)\">{'{columnWidth}'}</code> as a placeholder\n      for the actual image width.\n    </small>\n  </div>\n  <div class=\"ctrl-flex\" transition:slide>\n    <label for=\"___\">&nbsp;</label>\n    <small>\n      Use <code style=\"color: var(--accent)\">{'{setGap}'}</code> as a placeholder\n      for spacing set above.\n    </small>\n  </div>\n{/if}\n\n{#if splitImages.length > 0 && columnImages.length > 0 && !uploading}\n  <h3 transition:slide>Code</h3>\n\n  <textarea\n    transition:slide\n    bind:this={columnOutputTextArea}\n    class=\"output\"\n    type=\"text\"\n    readonly\n    bind:value={columnOutputCode}\n    on:click={columnSelectCode} />\n\n  <p transition:slide class=\"copiedToClipboardTxt\">\n    {columnCopiedToClipboardTxt}\n  </p>\n\n  <h3 transition:slide style=\"margin: 1rem 0\">Preview</h3>\n  <div transition:slide class=\"preview\" style=\"width: {maxWidth}px\">\n    {@html columnOutputCode}\n  </div>\n{/if}\n\n<dialog bind:this={apiKeyDialog}>\n  <h3>Connect</h3>\n\n  <label for=\"apiKeyTxt\">API key</label>\n  <input\n    style=\"width: 20rem; font-family: 'Inconsolata', 'SF Mono', Menlo, Consolas, 'Courier New', Courier, monospace;\"\n    type=\"text\"\n    class=\"apiKeyField\"\n    id=\"apiKeyTxt\"\n    bind:value={apiKey} />\n\n  <br />\n\n  <div\n    style=\"display: flex; gap: 4px; justify-content: flex-end; align-items: center; margin-top: 0.5rem;\">\n    <small\n      style=\"opacity: 0.6; cursor: pointer; margin-right: auto\"\n      on:click={() => (apiKey = 'be378ccde22c3aa784133ae1fe4ed5ec-us2')}>Demo\n      API key</small>\n\n    <button on:click={() => apiKeyDialog.close()}>Cancel</button>\n    <button disabled={apiKey.length < 1} on:click={setUp}>Connect</button>\n  </div>\n</dialog>\n"
  ],
  "names": [],
  "mappings": "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"
}